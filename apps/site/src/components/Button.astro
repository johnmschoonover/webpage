---
import { cva, type VariantProps } from 'class-variance-authority';
import { cn } from '@lib/utils';

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-full text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 ring-offset-background',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground shadow hover:bg-primary/90',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-muted hover:text-foreground',
        outline: 'border border-input bg-background hover:bg-muted'
      },
      size: {
        default: 'h-11 px-6 py-2',
        sm: 'h-9 px-4 text-sm',
        lg: 'h-12 px-8 text-base'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'default'
    }
  }
);

type ButtonVariants = VariantProps<typeof buttonVariants>;

interface Props extends ButtonVariants {
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  class?: string;
  rel?: string;
  target?: string;
  download?: string | boolean;
}

const {
  href,
  type = 'button',
  class: className,
  variant = 'default',
  size = 'default',
  ...attrs
} = Astro.props as Props;
const variantProps = { variant, size };
---
{href ? (
  <a href={href} class={cn(buttonVariants(variantProps), className)} {...attrs}>
    <slot />
  </a>
) : (
  <button type={type} class={cn(buttonVariants(variantProps), className)} {...attrs}>
    <slot />
  </button>
)}
